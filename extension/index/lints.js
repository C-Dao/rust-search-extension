var C=["Allow","Deprecated","Nothing. This lint has been deprecated.","Checks for (in-)equality comparisons on floating-p","Checks for bindings that shadow other bindings alr","Checks for casts between numerical types that may\n","Looks for floating-point expressions that\ncan be e","Detects enumeration variants that are prefixed or ","Checks for the definition of inherent methods with"];var lintsIndex={"mutex_atomic":["Warn","Checks for usages of `Mutex<X>` where an atomic wi"],"option_map_or_none":["Warn","Checks for usage of `_.map_or(None, _)`."],"needless_return":["Warn","Checks for return statements at the end of a block"],"large_enum_variant":["Warn","Checks for large size differences between variants"],"iter_skip_next":["Warn","Checks for use of `.skip(x).next()` on iterators."],"ptr_offset_with_cast":["Warn","Checks for usage of the `offset` pointer method wi"],"float_cmp_const":[C[0],C[3]],"absurd_extreme_comparisons":["Deny","Checks for comparisons where one side of the relat"],"serde_api_misuse":["Deny","Checks for mis-uses of the serde API."],"modulo_one":["Deny","Checks for getting the remainder of a division by "],"print_with_newline":["Warn","This lint warns when you use `print!()` with a for"],"str_to_string":[C[1],C[2]],"float_arithmetic":[C[0],"Checks for float arithmetic."],"option_map_unwrap_or":[C[0],"Checks for usage of `_.map(_).unwrap_or(_)`."],"precedence":["Warn","Checks for operations where precedence may be uncl"],"result_map_unwrap_or_else":[C[0],"Checks for usage of `result.map(_).unwrap_or_else("],"same_functions_in_if_condition":[C[0],"Checks for consecutive `if`s with the same functio"],"blacklisted_name":["Warn","Checks for usage of blacklisted names for variable"],"derive_hash_xor_eq":["Deny","Checks for deriving `Hash` but implementing `Parti"],"option_option":["Warn","Checks for use of `Option<Option<_>>` in function "],"transmute_bytes_to_str":["Warn","Checks for transmutes from a `&[u8]` to a `&str`."],"shadow_same":[C[0],C[4]],"unsound_collection_transmute":["Deny","Checks for transmutes between collections whose\nty"],"while_let_on_iterator":["Warn","Checks for `while let` expressions on iterators."],"wildcard_imports":[C[0],"Checks for wildcard imports `use _::*`."],"explicit_counter_loop":["Warn","Checks `for` loops over slices with an explicit co"],"invalid_upcast_comparisons":[C[0],"Checks for comparisons where the relation is alway"],"decimal_literal_representation":[C[0],"Warns if there is a better representation for a nu"],"identity_op":["Warn","Checks for identity operations, e.g., `x + 0`."],"cast_lossless":[C[0],C[5]],"eq_op":["Deny","Checks for equal operands to comparison, logical a"],"out_of_bounds_indexing":["Deny","Checks for out of bounds array indexing with a con"],"assign_op_pattern":["Warn","Checks for `a = a op b` or `a = b commutative_op a"],"skip_while_next":["Warn","Checks for usage of `_.skip_while(condition).next("],"multiple_inherent_impl":[C[0],"Checks for multiple inherent implementations of a "],"needless_borrow":[C[0],"Checks for address of operations (`&`) that are go"],"find_map":[C[0],"Checks for usage of `_.find(_).map(_)`."],"else_if_without_else":[C[0],"Checks for usage of if expressions with an `else i"],"string_extend_chars":["Warn","Checks for the use of `.extend(s.chars())` where s"],"verbose_bit_mask":["Warn","Checks for bit masks that can be replaced by a cal"],"get_last_with_len":["Warn","Checks for using `x.get(x.len() - 1)` instead of\n`"],"short_circuit_statement":["Warn","Checks for the use of short circuit boolean condit"],"mutable_key_type":["Deny","Checks for sets/maps with mutable key types."],"assertions_on_constants":["Warn","Checks for `assert!(true)` and `assert!(false)` ca"],"approx_constant":["Deny","Checks for floating point literals that approximat"],"map_entry":["Warn","Checks for uses of `contains_key` + `insert` on `H"],"inline_always":[C[0],"Checks for items annotated with `#[inline(always)]"],"naive_bytecount":["Warn","Checks for naive byte counts"],"single_match_else":[C[0],"Checks for matches with two arms where an `if let "],"string_lit_as_bytes":["Warn","Checks for the `as_bytes` method called on string "],"cast_ptr_alignment":["Deny","Checks for casts from a less-strictly-aligned poin"],"unsafe_vector_initialization":[C[1],C[2]],"unstable_as_mut_slice":[C[1],C[2]],"clone_double_ref":["Deny","Checks for usage of `.clone()` on an `&&T`."],"clone_on_ref_ptr":[C[0],"Checks for usage of `.clone()` on a ref-counted po"],"duration_subsec":["Warn","Checks for calculation of subsecond microseconds o"],"single_component_path_imports":["Warn","Checking for imports with single component use pat"],"must_use_candidate":[C[0],"Checks for public functions that have no\n[`#[must_"],"panic_params":["Warn","Checks for missing parameters in `panic!`."],"cognitive_complexity":["Warn","Checks for methods with high cognitive complexity."],"lossy_float_literal":[C[0],"Checks for whole number float literals that\ncannot"],"useless_let_if_seq":["Warn","Checks for variable declarations immediately follo"],"assign_ops":[C[1],C[2]],"borrowed_box":["Warn","Checks for use of `&Box<T>` anywhere in the code."],"non_ascii_literal":[C[0],"Checks for non-ASCII characters in string literals"],"suspicious_arithmetic_impl":["Deny","Lints for suspicious operations in impls of arithm"],"collapsible_if":["Warn","Checks for nested `if` statements which can be col"],"implicit_hasher":["Warn","Checks for public `impl` or `fn` missing generaliz"],"let_and_return":["Warn","Checks for `let`-bindings, which are subsequently\n"],"for_loop_over_option":["Deny","Checks for `for` loops over `Option` values."],"string_add_assign":[C[0],"Checks for string appends of the form `x = x + y` "],"unit_arg":["Warn","Checks for passing a unit value as an argument to "],"while_let_loop":["Warn","Detects `loop + match` combinations that are easie"],"needless_bool":["Warn","Checks for expressions of the form `if c { true } "],"wildcard_dependencies":[C[0],"Checks for wildcard dependencies in the `Cargo.tom"],"zero_prefixed_literal":["Warn","Warns if an integral constant literal starts with "],"empty_enum":[C[0],"Checks for `enum`s with no variants."],"single_match":["Warn","Checks for matches with a single arm where an `if "],"type_complexity":["Warn","Checks for types used in structs, parameters and `"],"inherent_to_string":["Warn",C[8]],"match_wild_err_arm":["Warn","Checks for arm which matches all errors with `Err("],"inconsistent_digit_grouping":["Warn","Warns if an integral or floating-point constant is"],"iter_nth":["Warn","Checks for use of `.iter().nth()` (and the related"],"match_same_arms":[C[0],"Checks for `match` with identical arm bodies."],"inefficient_to_string":["Warn","Checks for usage of `.to_string()` on an `&&T` whe"],"exit":[C[0],"`exit()`  terminates the program and doesn't provi"],"float_cmp":["Deny",C[3]],"mem_replace_with_uninit":["Deny","Checks for `mem::replace(&mut _, mem::uninitialize"],"useless_attribute":["Deny","Checks for `extern crate` and `use` items annotate"],"deref_addrof":["Warn","Checks for usage of `*&` and `*&mut` in expression"],"flat_map_identity":["Warn","Checks for usage of `flat_map(|x| x)`."],"map_flatten":[C[0],"Checks for usage of `_.map(_).flatten(_)`,"],"option_as_ref_deref":["Warn","Checks for usage of `_.as_ref().map(Deref::deref)`"],"trivially_copy_pass_by_ref":["Warn","Checks for functions taking arguments by reference"],"if_let_redundant_pattern_matching":[C[1],C[2]],"useless_transmute":["Warn","Checks for transmutes to the original type of the "],"temporary_assignment":["Warn","Checks for construction of a structure or tuple ju"],"for_kv_map":["Warn","Checks for iterating a map (`HashMap` or `BTreeMap"],"cast_ref_to_mut":["Deny","Checks for casts of `&T` to `&mut T` anywhere in t"],"type_repetition_in_bounds":[C[0],"This lint warns about unnecessary type repetitions"],"len_zero":["Warn","Checks for getting the length of something via `.l"],"needless_lifetimes":["Warn","Checks for lifetime annotations which can be remov"],"result_unwrap_used":[C[0],"Checks for `.unwrap()` calls on `Result`s."],"transmute_int_to_bool":["Warn","Checks for transmutes from an integer to a `bool`."],"option_env_unwrap":["Deny","Checks for usage of `option_env!(...).unwrap()` an"],"enum_glob_use":[C[0],"Checks for `use Enum::*`."],"no_effect":["Warn","Checks for statements which have no effect."],"double_must_use":["Warn","Checks for a [`#[must_use]`] attribute without\nfur"],"range_plus_one":[C[0],"Checks for exclusive ranges where 1 is added to th"],"min_max":["Deny","Checks for expressions where `std::cmp::min` and `"],"or_fun_call":["Warn","Checks for calls to `.or(foo(..))`, `.unwrap_or(fo"],"redundant_field_names":["Warn","Checks for fields in struct literals where shortha"],"chars_next_cmp":["Warn","Checks for usage of `.chars().next()` on a `str` t"],"double_comparisons":["Warn","Checks for double comparisons that could be simpli"],"transmute_int_to_float":["Warn","Checks for transmutes from an integer to a float."],"drop_ref":["Deny","Checks for calls to `std::mem::drop` with a refere"],"use_self":[C[0],"Checks for unnecessary repetition of structure nam"],"cmp_owned":["Warn","Checks for conversions to owned values just for th"],"fn_to_numeric_cast_with_truncation":["Warn","Checks for casts of a function pointer to a numeri"],"invalid_ref":[C[1],C[2]],"wildcard_enum_match_arm":[C[0],"Checks for wildcard enum matches using `_`."],"trivial_regex":["Warn","Checks for trivial [regex](https://crates.io/crate"],"double_parens":["Warn","Checks for unnecessary double parentheses."],"deprecated_semver":["Deny","Checks for `#[deprecated]` annotations with a `sin"],"redundant_clone":["Warn","Checks for a redundant `clone()` (and its relative"],"bool_comparison":["Warn","Checks for expressions of the form `x == true`,\n`x"],"main_recursion":["Warn","Checks for recursion using the entrypoint."],"filter_map_next":[C[0],"Checks for usage of `_.filter_map(_).next()`."],"partialeq_ne_impl":["Warn","Checks for manual re-implementations of `PartialEq"],"suspicious_unary_op_formatting":["Warn","Checks the formatting of a unary operator on the r"],"copy_iterator":[C[0],"Checks for types that implement `Copy` as well as\n"],"range_minus_one":["Warn","Checks for inclusive ranges where 1 is subtracted "],"unicode_not_nfc":[C[0],"Checks for string literals that contain Unicode in"],"use_debug":[C[0],"Checks for use of `Debug` formatting. The purpose "],"write_with_newline":["Warn","This lint warns when you use `write!()` with a for"],"wrong_transmute":["Deny","Checks for transmutes that can't ever be correct o"],"unused_label":[C[1],C[2]],"iter_next_loop":["Deny","Checks for loops on `x.next()`."],"iterator_step_by_zero":["Deny","Checks for calling `.step_by(0)` on iterators whic"],"for_loop_over_result":["Deny","Checks for `for` loops over `Result` values."],"redundant_pattern_matching":["Warn","Lint for redundant pattern matching over `Result` "],"regex_macro":["Warn","Checks for usage of `regex!(_)` which (as of now) "],"shadow_unrelated":[C[0],C[4]],"extend_from_slice":[C[1],C[2]],"cast_possible_truncation":[C[0],C[5]],"get_unwrap":[C[0],"Checks for use of `.get().unwrap()` (or\n`.get_mut("],"neg_cmp_op_on_partial_ord":["Warn","Checks for the usage of negated comparison operato"],"option_and_then_some":["Warn","Checks for usage of `_.and_then(|x| Some(y))`."],"fallible_impl_from":[C[0],"Checks for impls of `From<..>` that contain `panic"],"struct_excessive_bools":[C[0],"Checks for excessive\nuse of bools in structs."],"should_assert_eq":[C[1],C[2]],"suspicious_assignment_formatting":["Warn","Checks for use of the non-existent `=*`, `=!` and "],"todo":[C[0],"Checks for usage of `todo!`."],"mem_replace_with_default":["Warn","Checks for `std::mem::replace` on a value of type\n"],"box_vec":["Warn","Checks for use of `Box<Vec<_>>` anywhere in the co"],"useless_asref":["Warn","Checks for usage of `.as_ref()` or `.as_mut()` whe"],"zero_ptr":["Warn","Catch casts from `0` to some pointer type"],"bad_bit_mask":["Deny","Checks for incompatible bit masks in comparisons.\n"],"into_iter_on_array":[C[1],C[2]],"match_ref_pats":["Warn","Checks for matches where all arms match a referenc"],"panic":[C[0],"Checks for usage of `panic!`."],"default_trait_access":[C[0],"Checks for literal calls to `Default::default()`."],"path_buf_push_overwrite":[C[0],"* Checks for [push](https://doc.rust-lang.org/std/"],"misaligned_transmute":[C[1],C[2]],"filetype_is_file":[C[0],"Checks for `FileType::is_file()`."],"redundant_closure_for_method_calls":[C[0],"Checks for closures which only invoke a method on "],"unnecessary_filter_map":["Warn","Checks for `filter_map` calls which could be repla"],"len_without_is_empty":["Warn","Checks for items that implement `.len()` but not\n`"],"question_mark":["Warn","Checks for expressions that could be replaced by t"],"ifs_same_cond":["Deny","Checks for consecutive `if`s with the same conditi"],"tabs_in_doc_comments":["Warn","Checks doc comments for usage of tab characters."],"char_lit_as_u8":["Warn","Checks for expressions where a character literal i"],"doc_markdown":[C[0],"Checks for the presence of `_`, `::` or camel-case"],"wrong_self_convention":["Warn","Checks for methods with certain name prefixes and "],"as_conversions":[C[0],"Checks for usage of `as` conversions."],"declare_interior_mutable_const":["Deny","Checks for declaration of `const` items which is i"],"fn_to_numeric_cast":["Warn","Checks for casts of function pointers to something"],"if_let_some_result":["Warn","* Checks for unnecessary `ok()` in if let."],"transmuting_null":["Deny","Checks for transmute calls which would receive a n"],"map_clone":["Warn","Checks for usage of `iterator.map(|x| x.clone())` "],"match_overlapping_arm":["Warn","Checks for overlapping match arms."],"range_step_by_zero":[C[1],C[2]],"single_char_pattern":["Warn","Checks for string methods that receive a single-ch"],"expl_impl_clone_on_copy":[C[0],"Checks for explicit `Clone` implementations for `C"],"useless_vec":["Warn","Checks for usage of `&vec![..]` when using `&[..]`"],"integer_division":[C[0],"Checks for division of integers"],"needless_range_loop":["Warn","Checks for looping over the range of `0..len` of s"],"cmp_null":["Warn","This lint checks for equality comparisons with `pt"],"inline_fn_without_body":["Deny","Checks for `#[inline]` on trait methods without bo"],"enum_clike_unportable_variant":["Deny","Checks for C-like enumerations that are\n`repr(isiz"],"manual_swap":["Warn","Checks for manual swapping."],"missing_errors_doc":[C[0],"Checks the doc comments of publicly visible functi"],"maybe_infinite_iter":[C[0],"Checks for iteration that may be infinite."],"new_without_default":["Warn","Checks for types with a `fn new() -> Self` method "],"not_unsafe_ptr_arg_deref":["Deny","Checks for public functions that dereference raw p"],"missing_inline_in_public_items":[C[0],"it lints if an exported function, method, trait me"],"forget_copy":["Deny","Checks for calls to `std::mem::forget` with a valu"],"try_err":["Warn","Checks for usages of `Err(x)?`."],"mem_replace_option_with_none":["Warn","Checks for `mem::replace()` on an `Option` with\n`N"],"string_to_string":[C[1],C[2]],"unnecessary_unwrap":["Warn","Checks for calls of `unwrap[_err]()` that cannot f"],"suspicious_map":["Warn","Checks for calls to `map` followed by a `count`."],"wrong_pub_self_convention":[C[0],"This is the same as\n[`wrong_self_convention`](#wro"],"large_stack_arrays":[C[0],"Checks for local arrays that may be too large."],"result_expect_used":[C[0],"Checks for `.expect()` calls on `Result`s."],"print_stdout":[C[0],"Checks for printing on *stdout*. The purpose of th"],"clone_on_copy":["Warn","Checks for usage of `.clone()` on a `Copy` type."],"almost_swapped":["Deny","Checks for `foo = bar; bar = foo` sequences."],"forget_ref":["Deny","Checks for calls to `std::mem::forget` with a refe"],"if_not_else":[C[0],"Checks for usage of `!` or `!=` in an if condition"],"deprecated_cfg_attr":["Warn","Checks for `#[cfg_attr(rustfmt, rustfmt_skip)]` an"],"missing_const_for_fn":[C[0],"Suggests the use of `const` in functions and metho"],"possible_missing_comma":["Deny","Checks for possible missing comma in an array. It "],"unknown_clippy_lints":["Warn","Checks for `allow`/`warn`/`deny`/`forbid` attribut"],"eval_order_dependence":["Warn","Checks for a read and a write to the same variable"],"excessive_precision":["Warn","Checks for float literals with a precision greater"],"imprecise_flops":[C[0],C[6]],"just_underscores_and_digits":["Warn","Checks if you have variables whose name consists o"],"explicit_iter_loop":[C[0],"Checks for loops on `x.iter()` where `&x` will do,"],"filter_map":[C[0],"Checks for usage of `_.filter(_).map(_)`,\n`_.filte"],"overflow_check_conditional":["Warn","Detects classic underflow/overflow checks."],"range_zip_with_len":["Warn","Checks for zipping a collection with the range of\n"],"reverse_range_loop":["Deny","Checks for loops over ranges `x..y` where both `x`"],"transmute_int_to_char":["Warn","Checks for transmutes from an integer to a `char`."],"drop_copy":["Deny","Checks for calls to `std::mem::drop` with a value\n"],"items_after_statements":[C[0],"Checks for items declared after some statement in "],"new_ret_no_self":["Warn","Checks for `new` not returning `Self`."],"unit_cmp":["Deny","Checks for comparisons to unit. This includes all "],"zero_divided_by_zero":["Warn","Checks for `0.0 / 0.0`."],"wildcard_in_or_patterns":["Warn","Checks for wildcard pattern used with others patte"],"mistyped_literal_suffixes":["Deny","Warns for mistyped suffix in literals"],"expect_fun_call":["Warn","Checks for calls to `.expect(&format!(...))`, `.ex"],"fn_params_excessive_bools":[C[0],"Checks for excessive use of\nbools in function defi"],"println_empty_string":["Warn","This lint warns when you use `println!(\"\")` to\npri"],"iter_cloned_collect":["Warn","Checks for the use of `.cloned().collect()` on sli"],"unneeded_wildcard_pattern":["Warn","Checks for tuple patterns with a wildcard\npattern "],"unstable_as_slice":[C[1],C[2]],"identity_conversion":["Warn","Checks for always-identical `Into`/`From`/`IntoIte"],"mutex_integer":[C[0],"Checks for usages of `Mutex<X>` where `X` is an in"],"pub_enum_variant_names":[C[0],C[7]],"similar_names":[C[0],"Checks for names that are very similar and thus co"],"diverging_sub_expression":["Warn","Checks for diverging calls that are not match arms"],"zst_offset":["Deny","Checks for `offset(_)`, `wrapping_`{`add`, `sub`},"],"to_digit_is_some":["Warn","Checks for `.to_digit(..).is_some()` on `char`s."],"never_loop":["Deny","Checks for loops that will always `break`, `return"],"match_single_binding":["Warn","Checks for useless match that binds to only one va"],"unnecessary_cast":["Warn","Checks for casts to the same type."],"panicking_unwrap":["Deny","Checks for calls of `unwrap[_err]()` that will alw"],"option_map_unit_fn":["Warn","Checks for usage of `option.map(f)` where f is a f"],"ineffective_bit_mask":["Deny","Checks for bit masks in comparisons which can be r"],"unimplemented":[C[0],"Checks for usage of `unimplemented!`."],"neg_multiply":["Warn","Checks for multiplication by -1 as a form of negat"],"zero_width_space":["Deny","Checks for the Unicode zero-width space in the cod"],"double_neg":["Warn","Detects expressions of the form `--x`."],"explicit_into_iter_loop":[C[0],"Checks for loops on `y.into_iter()` where `y` will"],"suspicious_op_assign_impl":["Deny","Lints for suspicious operations in impls of OpAssi"],"manual_memcpy":["Warn","Checks for for-loops that manually copy items betw"],"redundant_pattern":["Warn","Checks for patterns in the form `name @ _`."],"replace_consts":[C[0],"Checks for usage of standard library\n`const`s that"],"writeln_empty_string":["Warn","This lint warns when you use `writeln!(buf, \"\")` t"],"indexing_slicing":[C[0],"Checks for usage of indexing or slicing. Arrays ar"],"many_single_char_names":["Warn","Checks for too many variables whose name consists "],"ref_in_deref":["Warn","Checks for references in expressions that use\nauto"],"let_underscore_lock":["Deny","Checks for `let _ = sync_lock`"],"match_bool":["Warn","Checks for matches where match expression is a `bo"],"must_use_unit":["Warn","Checks for a [`#[must_use]`] attribute on\nunit-ret"],"nonsensical_open_options":["Deny","Checks for duplicate open options as well as combi"],"suspicious_else_formatting":["Warn","Checks for formatting of `else`. It lints if the `"],"temporary_cstring_as_ptr":["Deny","Checks for getting the inner pointer of a temporar"],"cmp_nan":["Deny","Checks for comparisons to NaN."],"drop_bounds":["Deny","Checks for generics with `std::ops::Drop` as bound"],"needless_doctest_main":["Warn","Checks for `fn main() { .. }` in doctests"],"vec_box":["Warn","Checks for use of `Vec<Box<T>>` where T: Sized any"],"redundant_closure":["Warn","Checks for closures which just call another functi"],"comparison_chain":["Warn","Checks comparison chains written with `if` that ca"],"while_immutable_condition":["Deny","Checks whether variables used within while loop co"],"if_same_then_else":["Deny","Checks for `if/else` with the same body as the *th"],"let_unit_value":["Warn","Checks for binding a unit value."],"module_inception":["Warn","Checks for modules that have the same name as thei"],"suboptimal_flops":[C[0],C[6]],"enum_variant_names":["Warn",C[7]],"string_add":[C[0],"Checks for all instances of `x + _` where `x` is o"],"cargo_common_metadata":[C[0],"Checks to see if all common metadata is defined in"],"duplicate_underscore_argument":["Warn","Checks for function arguments having the similar n"],"explicit_write":["Warn","Checks for usage of `write!()` / `writeln()!` whic"],"mem_discriminant_non_enum":["Deny","Checks for calls of `mem::discriminant()` on a non"],"too_many_arguments":["Warn","Checks for functions with too many parameters."],"mut_mut":[C[0],"Checks for instances of `mut mut` references."],"block_in_if_condition_expr":["Warn","Checks for `if` conditions that use blocks to cont"],"option_unwrap_used":[C[0],"Checks for `.unwrap()` calls on `Option`s."],"checked_conversions":[C[0],"Checks for explicit bounds checking when casting."],"borrow_interior_mutable_const":["Deny","Checks if `const` items which is interior mutable "],"empty_loop":["Warn","Checks for empty `loop` expressions."],"match_as_ref":["Warn","Checks for match which is used to add a reference "],"mut_from_ref":["Deny","This lint checks for functions that take immutable"],"result_map_unit_fn":["Warn","Checks for usage of `result.map(f)` where f is a f"],"unnecessary_mut_passed":["Warn","Detects giving a mutable reference to a function t"],"unreadable_literal":["Warn","Warns if a long integral or floating-point constan"],"needless_borrowed_reference":["Warn","Checks for useless borrowed references."],"logic_bug":["Deny","Checks for boolean expressions that contain termin"],"unused_collect":[C[1],C[2]],"needless_collect":["Warn","Checks for functions collecting an iterator when c"],"inherent_to_string_shadow_display":["Deny",C[8]],"needless_pass_by_value":[C[0],"Checks for functions taking arguments by value, bu"],"uninit_assumed_init":["Deny","Checks for `MaybeUninit::uninit().assume_init()`."],"unreachable":[C[0],"Checks for usage of `unreachable!`."],"op_ref":["Warn","Checks for arguments to `==` which have their addr"],"invalid_atomic_ordering":["Deny","Checks for usage of invalid atomic\nordering in ato"],"manual_saturating_arithmetic":["Warn","Checks for `.checked_add/sub(x).unwrap_or(MAX/MIN)"],"mixed_case_hex_literals":["Warn","Warns on hexadecimal literals with mixed-case lett"],"modulo_arithmetic":[C[0],"Checks for modulo arithemtic."],"cast_sign_loss":[C[0],"Checks for casts from a signed to an unsigned nume"],"int_plus_one":["Warn","Checks for usage of `x >= y + 1` or `x - 1 >= y` ("],"transmute_ptr_to_ptr":["Warn","Checks for transmutes from a pointer to a pointer,"],"chars_last_cmp":["Warn","Checks for usage of `.chars().last()` or\n`.chars()"],"boxed_local":["Warn","Checks for usage of `Box<T>` where an unboxed `T` "],"cast_precision_loss":[C[0],"Checks for casts from any numerical to a float typ"],"multiple_crate_versions":[C[0],"Checks to see if multiple versions of a crate are "],"nonminimal_bool":["Warn","Checks for boolean expressions that can be written"],"cast_possible_wrap":[C[0],"Checks for casts from an unsigned type to a signed"],"unneeded_field_pattern":[C[0],"Checks for structure field patterns bound to wildc"],"needless_continue":[C[0],"The lint checks for `if`-statements appearing in l"],"option_map_unwrap_or_else":[C[0],"Checks for usage of `_.map(_).unwrap_or_else(_)`."],"unused_self":[C[0],"Checks methods that contain a `self` argument but "],"let_underscore_must_use":[C[0],"Checks for `let _ = <expr>`\nwhere expr is #[must_u"],"needless_update":["Warn","Checks for needlessly including a base struct on u"],"missing_safety_doc":["Warn","Checks for the doc comments of publicly visible\nun"],"slow_vector_initialization":["Warn","Checks slow zero-filled vector initialization"],"option_expect_used":[C[0],"Checks for `.expect()` calls on `Option`s."],"misrefactored_assign_op":["Warn","Checks for `a op= a op b` or `a op= b op a` patter"],"unseparated_literal_suffix":[C[0],"Warns if literal suffixes are not separated by an\n"],"unsafe_removed_from_name":["Warn","Checks for imports that remove \"unsafe\" from an it"],"extra_unused_lifetimes":["Warn","Checks for lifetimes in generics that are never us"],"iter_nth_zero":["Warn","Checks for the use of `iter.nth(0)`."],"filter_next":["Warn","Checks for usage of `_.filter(_).next()`."],"infallible_destructuring_match":["Warn","Checks for matches being used to destructure a sin"],"block_in_if_condition_stmt":["Warn","Checks for `if` conditions that use blocks contain"],"empty_line_after_outer_attr":[C[0],"Checks for empty lines after outer attributes"],"implicit_return":[C[0],"Checks for missing return statements at the end of"],"infinite_iter":["Deny","Checks for iteration that is guaranteed to be infi"],"redundant_static_lifetimes":["Warn","Checks for constants and statics with an explicit "],"search_is_some":["Warn","Checks for an iterator search (such as `find()`,\n`"],"builtin_type_shadow":["Warn","Warns if a generic shadows a built-in type."],"integer_arithmetic":[C[0],"Checks for plain integer arithmetic."],"mut_range_bound":["Warn","Checks for loops which have a range bound that is "],"ok_expect":["Warn","Checks for usage of `ok().expect(..)`."],"too_many_lines":[C[0],"Checks for functions with a large amount of lines."],"unnecessary_operation":["Warn","Checks for expression statements that can be reduc"],"redundant_closure_call":["Warn","Detects closures called in the same expression whe"],"debug_assert_with_mut_call":[C[0],"Checks for function/method calls with a mutable\npa"],"mem_forget":[C[0],"Checks for usage of `std::mem::forget(t)` where `t"],"linkedlist":[C[0],"Checks for usage of any `LinkedList`, suggesting t"],"transmute_ptr_to_ref":["Warn","Checks for transmutes from a pointer to a referenc"],"erasing_op":["Deny","Checks for erasing operations, e.g., `x * 0`."],"into_iter_on_ref":["Warn","Checks for `into_iter` calls on references which s"],"should_implement_trait":["Warn","Checks for methods that should live in a trait\nimp"],"unused_io_amount":["Deny","Checks for unused written/read amount."],"ptr_arg":["Warn","This lint checks for function arguments of type `&"],"useless_format":["Warn","Checks for the use of `format!(\"string literal wit"],"unnecessary_fold":["Warn","Checks for using `fold` when a more succinct alter"],"module_name_repetitions":[C[0],"Detects type names that are prefixed or suffixed b"],"toplevel_ref_arg":["Warn","Checks for function arguments and let bindings den"],"crosspointer_transmute":["Warn","Checks for transmutes between a type `T` and `*T`."],"shadow_reuse":[C[0],C[4]],"large_digit_groups":[C[0],"Warns if the digits of an integral or floating-poi"],"write_literal":["Warn","This lint warns about the use of literals as `writ"],"invalid_regex":["Deny","Checks [regex](https://crates.io/crates/regex) cre"],"dbg_macro":[C[0],"Checks for usage of dbg!() macro."],"missing_docs_in_private_items":[C[0],"Warns if there is missing doc for any documentable"],"transmute_float_to_int":["Warn","Checks for transmutes from a float to an integer."],"used_underscore_binding":[C[0],"Checks for the use of bindings with a single leadi"],"unused_unit":["Warn","Checks for unit (`()`) expressions that can be rem"],"print_literal":["Warn","This lint warns about the use of literals as `prin"]};